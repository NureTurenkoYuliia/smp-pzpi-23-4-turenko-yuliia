МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ







ЗВІТ
з дисципліни «Скриптові мови програмування»
із завдання №1
     




Виконала: 							Перевірив: 
ст. гр. ПЗПІ-23-4 						старший викладач каф. ПІ 
Туренко Ю.С. 						Сокорчук І.П.
     
     
     
     
     


ХАРКІВ 2025

1.1. Завдання
     Написати Bash скрипт, який друкуватиме на екрані симетричну ялинку із двох ярусів гілок, стовбура та шару снігу, використовуючи символи «#» та «*».

1.2. Хід роботи
     На початку скрипта виконується перевірка кількості переданих аргументів, для цього застосовується $# (Додаток А: рядки 20-23). Скрипт приймає лише два параметри, тобто висоту ялинки та ширину снігу.
     Далі викликається метод для перевірки, чи є рядок цілим числом (включаючи від’ємні), використовуючи регулярний вираз ^-?[0-9]+$, та чи параметри є додатними і не замалими (Додаток А: рядки 3-18). Потім якщо отримана висота є непарною, а ширина снігу є парною – параметр зменшується на одиницю (Додаток А: рядки 30-36).
     Далі є ще одна перевірка на те, чи ширина снігу дозволяє побудувати ялинку, а саме обрахована різниця повинна дорівнювати 1, що потрібно для пропорційної ялинки відповідно до отриманих параметрів (Додаток А: рядки 40-43). Використання >&2 означає перенаправлення виведення помилки в стандартний потік помилок (stderr), що дозволяє чітко розділяти звичайний вивід програми та повідомлення про помилки.
     Також обраховується висота ярусу (Додаток А: рядок 48).
     Для друку ялинки створено декілька циклів, які знаходяться один в одному. Перший (while) відповідає за ярус (Додаток А: рядок 50), другий (until) – висоту ярусу (Додаток А: рядок 54), третій (for) – ширину рядка (Додаток А: рядок 56). У першому циклі визначаються дві змінні:
1) tier_width – початкова ширина ярусу (Додаток А: рядок 51);
2) spaces – кількість пробілів (Додаток А: рядок 52). 
     У другому та третьому циклах для кожного рядка ярусу друкуються пробіли і символи «*» або «#». Для виведення рядків з правильним вирівнюванням використано команду printf, що дозволяє задати точну кількість пробілів (Додаток А: рядок 55). 
     Потім друкуються стовбур й основа, тобто нижній шар снігу.

1.3. Висновок
     Під час виконання завдання, були повторені та використані на практиці знання скриптової мови Bash.  У розробленому скрипті були реалізовані перевірки коректності введених параметрів, алгоритми формування ялинки залежно від параметрів, а також вивід символів із урахуванням форматування. Кожен елемент ялинки, від верхівки до основи, будується за допомогою базових команд printf і echo. Були створені перевірки if для коригування параметрів друку та цикли for, while і until.


ДОДАТОК А
Розроблений скрипт
    1 #!/bin/bash
  2
  3 check_params(){
  4     if [[ ! "$height" =~ ^-?[0-9]+$ || ! "$snow_width" =~ ^-?[0-9]+$ ]]; then
  5             echo "Параметри повинні бути цілими числами." >&2
  6             exit 2
  7     fi
  8
  9     if ((height<=0 || snow_width<=0)); then
 10             echo "Параметри повинні бути додатніми." >&2
 11             exit 3
 12     fi
 13
 14     if ((height<8 || snow_width<7)); then
 15             echo "Замалі параметри для побудови ялинки." >&2
 16             exit 4
 17     fi
 18 }
 19
 20 if [[ $# -ne 2 ]]; then
 21     echo "Потрібно передати два аргументи." >&2
 22     exit 1
 23 fi
 24
 25 height=$1
 26 snow_width=$2
 27
 28 check_params
 29
 30 if((height % 2 != 0)); then
 31     height=$((height - 1))
 32 fi
 33
 34 if((snow_width % 2 == 0)); then
 35     snow_width=$((snow_width - 1))
 36 fi
 37
 38 difference=$((height - snow_width))
 39
 40 if((difference != 1)); then
 41     echo "Ширина снігу замала щоб побудувати ялинку." >&2
 42     exit 5
 43 fi
 44
 45 symb1="*"
 46 symb2="#"
 47 t=0
 48 tier_height=$(((height - 2) / 2))
 49
 50 while [[ $t -lt 2 ]]; do
 51     tier_width=$((t * 2 + 1))
 52     spaces=$(((snow_width - tier_width) / 2))
 53     i=0
 54     until [[ $i -ge $tier_height ]]; do
 55             printf "%*s" "$spaces" ""
 56             for((j=0; j < tier_width; j++)); do
 57                     if((i%2 == 0)); then
 58                             printf "%s" "$symb1"
 59                     else
 60                             printf "%s" "$symb2"
 61                     fi
 62             done
 63             echo
 64             tier_width=$((tier_width + 2))
 65             spaces=$((spaces - 1))
 66             i=$((i + 1))
 67     done
 68     if((tier_height % 2 != 0)); then
 69             symb1="#"
 70             symb2="*"
 71     fi
 72     tier_height=$((tier_height - 1))
 73     t=$((t + 1))
 74 done
 75
 76 spaces=$(((snow_width - 3) / 2))
 77 printf "%*s" "$spaces" ""
 78 echo "###"
 79 printf "%*s" "$spaces" ""
 80 echo "###"
 81
 82 for((i=0; i < snow_width; i++)); do
 83     printf "%s" "*"
 84 done
 85 echo
 86
 87 exit 0
      2
      
      
